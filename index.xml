<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Pedro Cattori</title>
    <link>http://www.github.pcattori.io/</link>
    <description>Recent content in Blog on Pedro Cattori</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 28 Apr 2020 13:59:48 -0400</lastBuildDate>
    
	<atom:link href="http://www.github.pcattori.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://www.github.pcattori.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.github.pcattori.io/about/</guid>
      <description>Hi! I&amp;rsquo;m Pedro. I&amp;rsquo;m currently a Machine Learning Engineer @ Tamr.</description>
    </item>
    
    <item>
      <title>Inventing the Y-Combinator</title>
      <link>http://www.github.pcattori.io/posts/y-combinator/</link>
      <pubDate>Tue, 28 Apr 2020 13:59:48 -0400</pubDate>
      
      <guid>http://www.github.pcattori.io/posts/y-combinator/</guid>
      <description>In this post we will derive the Y-combinator from first principles.
In other words, we will invent a reusable way to use recursion in lambda calculus.
To ground our understanding, we will reference the Python implementation of the Fibonacci series as our main example:
# fibonacci def f(n): if n == 0: return 1 if n == 1: return 1 return f(n - 1) + f(n - 2) Step 1:</description>
    </item>
    
    <item>
      <title>The Machine Learning Landscape</title>
      <link>http://www.github.pcattori.io/posts/ml-landscape/</link>
      <pubDate>Fri, 20 Dec 2019 19:09:01 -0500</pubDate>
      
      <guid>http://www.github.pcattori.io/posts/ml-landscape/</guid>
      <description>In this blog post, I will introduce Machine Learning (ML). If you want to get deeper on any of these topics, just reach out.
AI &amp;amp; ML Artificial Intelligence and Machine Learning are often conflated, but they are not the same. Rather, ML is a subset of AI.
Deep Learning is a subset of ML and will be discussed at the end of this post.
  AI is “intelligence demonstrated by machines&amp;hellip;that mimic cognitive functions that humans associate with the human mind, such as learning and problem solving”.</description>
    </item>
    
    <item>
      <title>Composable Behavior with React Hooks</title>
      <link>http://www.github.pcattori.io/posts/composable-behavior/</link>
      <pubDate>Thu, 14 Nov 2019 21:07:19 -0500</pubDate>
      
      <guid>http://www.github.pcattori.io/posts/composable-behavior/</guid>
      <description>When I first learned React ⚛, it took me less than a day to run into the ol&amp;rsquo; &amp;ldquo;controlled vs uncontrolled components&amp;rdquo; dichotomy. At the time, I didn&amp;rsquo;t know the terms &amp;ldquo;controlled&amp;rdquo; and &amp;ldquo;uncontrolled&amp;rdquo;, but still struggled to fit my designs into these two buckets.
The tension was between 2 competing goals:
 I want to make my components as reusable as possible My use-cases were similar, but not exactly the same&amp;hellip;  Here&amp;rsquo;s a checkbox component that takes care of styling and toggling when clicked.</description>
    </item>
    
    <item>
      <title>Tidy Processes in Python</title>
      <link>http://www.github.pcattori.io/posts/tidy-processes/</link>
      <pubDate>Thu, 07 Nov 2019 20:12:00 -0500</pubDate>
      
      <guid>http://www.github.pcattori.io/posts/tidy-processes/</guid>
      <description>The subprocess module from the Python standard library makes it easy to start processes from within your Python script.
But, it gets more complex if:
 You need to run the subprocess concurrently with your script The subprocess creates its own child processes  In my case, I had a Flask server that needed to be running while my experiment script ran since my script made API calls to the server.</description>
    </item>
    
  </channel>
</rss>