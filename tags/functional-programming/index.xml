<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on Pedro Cattori</title>
    <link>http://www.github.pcattori.io/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on Pedro Cattori</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 28 Apr 2020 13:59:48 -0400</lastBuildDate>
    
	<atom:link href="http://www.github.pcattori.io/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inventing the Y-Combinator</title>
      <link>http://www.github.pcattori.io/posts/y-combinator/</link>
      <pubDate>Tue, 28 Apr 2020 13:59:48 -0400</pubDate>
      
      <guid>http://www.github.pcattori.io/posts/y-combinator/</guid>
      <description>In this post we will derive the Y-combinator from first principles.
In other words, we will invent a reusable way to use recursion in lambda calculus.
Step 1:
Start with a function \( f \) whose implementation is self-referencing. Then the body of \( f \) must look like:
\[ f = ...f...f... \] Here we use \( ... \) to denote any lambda calculus expression.
Step 2:
Instead of hardcoding \( f \) in the body, let&amp;rsquo;s factor out \( f \) :</description>
    </item>
    
  </channel>
</rss>