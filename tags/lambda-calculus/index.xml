<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lambda Calculus on Pedro Cattori</title>
    <link>http://www.github.pcattori.io/tags/lambda-calculus/</link>
    <description>Recent content in Lambda Calculus on Pedro Cattori</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 28 Apr 2020 13:59:48 -0400</lastBuildDate>
    
	<atom:link href="http://www.github.pcattori.io/tags/lambda-calculus/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inventing the Y-Combinator</title>
      <link>http://www.github.pcattori.io/posts/y-combinator/</link>
      <pubDate>Tue, 28 Apr 2020 13:59:48 -0400</pubDate>
      
      <guid>http://www.github.pcattori.io/posts/y-combinator/</guid>
      <description>In this post we will derive the Y-combinator from first principles.
In other words, we will invent a reusable way to use recursion in lambda calculus.
To ground our understanding, we will reference the Python implementation of the Fibonacci series as our main example:
# fibonacci def f(n): if n == 0: return 1 if n == 1: return 1 return f(n - 1) + f(n - 2) Step 1:</description>
    </item>
    
  </channel>
</rss>